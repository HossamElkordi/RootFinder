#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 5.0.3
#  in conjunction with Tcl version 8.6
#    Apr 13, 2020 05:02:33 PM +0200  platform: Windows NT

import sys

from PIL import ImageTk, Image

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk

    py3 = False
except ImportError:
    import tkinter.ttk as ttk

    py3 = True

import rootFinder_support


def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = tk.Tk()
    rootFinder_support.set_Tk_var()
    top = mainWindow(root)
    rootFinder_support.init(root, top)
    root.mainloop()


w = None


def create_mainWindow(rt, *args, **kwargs):
    '''Starting point when module is imported by another module.
       Correct form of call: 'create_mainWindow(root, *args, **kwargs)' .'''
    global w, w_win, root
    # rt = root
    root = rt
    w = tk.Toplevel(root)
    rootFinder_support.set_Tk_var()
    top = mainWindow(w)
    rootFinder_support.init(w, top, *args, **kwargs)
    return (w, top)


def destroy_mainWindow():
    global w
    w.destroy()
    w = None


class mainWindow:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9'  # X11 color: 'gray85'
        _ana1color = '#d9d9d9'  # X11 color: 'gray85'
        _ana2color = '#ececec'  # Closest X11 color: 'gray92'
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.', background=_bgcolor)
        self.style.configure('.', foreground=_fgcolor)
        self.style.configure('.', font="TkDefaultFont")
        self.style.map('.', background=
        [('selected', _compcolor), ('active', _ana2color)])

        top.geometry("600x450+373+127")
        top.minsize(600, 450)
        top.maxsize(1370, 730)
        top.resizable(1, 1)
        top.title("Root Finder")
        top.configure(background="#d9d9d9")

        self.menubar = tk.Menu(top, font="TkMenuFont", bg=_bgcolor, fg=_fgcolor)
        top.configure(menu=self.menubar)

        self.sub_menu = tk.Menu(top, tearoff=0)
        self.menubar.add_cascade(menu=self.sub_menu,
                                 activebackground="#ececec",
                                 activeforeground="#000000",
                                 background="#d9d9d9",
                                 compound="left",
                                 foreground="#000000",
                                 label="File")
        self.sub_menu.add_command(
            activebackground="#ececec",
            activeforeground="#000000",
            background="#d9d9d9",
            command=rootFinder_support.saveFunc,
            foreground="#000000",
            label="Save")
        self.sub_menu.add_command(
            activebackground="#ececec",
            activeforeground="#000000",
            background="#d9d9d9",
            command=rootFinder_support.loadFunc,
            foreground="#000000",
            label="Load")
        self.sub_menu.add_separator(
            background="#d9d9d9")
        self.sub_menu.add_command(
            activebackground="#ececec",
            activeforeground="#000000",
            background="#d9d9d9",
            command=rootFinder_support.exitFunc,
            foreground="#000000",
            label="Exit")
        self.sub_menu1 = tk.Menu(top, tearoff=0)
        self.menubar.add_cascade(menu=self.sub_menu1,
                                 activebackground="#ececec",
                                 activeforeground="#000000",
                                 background="#d9d9d9",
                                 compound="left",
                                 foreground="#000000",
                                 label="Help")
        self.sub_menu1.add_command(
            activebackground="#ececec",
            activeforeground="#000000",
            background="#d9d9d9",
            command=rootFinder_support.helpFunc,
            foreground="#000000",
            label="About")

        self.TSeparator1 = ttk.Separator(top)
        self.TSeparator1.place(relx=0.617, rely=0.0, relheight=1.0)
        self.TSeparator1.configure(orient="vertical")

        self.Scrolledwindow1 = ScrolledWindow(top)
        self.Scrolledwindow1.place(relx=0.618, rely=0.0, relheight=1.002
                                   , relwidth=0.375)
        self.Scrolledwindow1.configure(background="#707070")
        self.Scrolledwindow1.configure(borderwidth="2")
        self.Scrolledwindow1.configure(highlightbackground="#d9d9d9")
        self.Scrolledwindow1.configure(highlightcolor="black")
        self.Scrolledwindow1.configure(insertbackground="black")
        self.Scrolledwindow1.configure(relief="groove")
        self.Scrolledwindow1.configure(selectbackground="#c4c4c4")
        self.Scrolledwindow1.configure(selectforeground="black")
        self.color = self.Scrolledwindow1.cget("background")
        self.Scrolledwindow1_f = tk.Frame(self.Scrolledwindow1,
                                          background=self.color)
        self.Scrolledwindow1.create_window(0, 0, anchor='nw',
                                           window=self.Scrolledwindow1_f)

        self.backCanvas = tk.Canvas(top)
        self.backCanvas.place(relx=0.0, rely=0.0, relheight=0.996, relwidth=0.617)
        self.backCanvas.configure(background="#d9d9d9")
        self.backCanvas.configure(borderwidth="2")
        self.backCanvas.configure(insertbackground="black")
        self.backCanvas.configure(relief="ridge")
        self.backCanvas.configure(selectbackground="#c4c4c4")
        self.backCanvas.configure(selectforeground="black")

        self.toolBar = ttk.Frame(self.backCanvas)
        self.toolBar.place(relx=0.0, rely=0.0, relheight=0.056, relwidth=1.0)
        self.toolBar.configure(relief='groove')
        self.toolBar.configure(borderwidth="2")
        self.toolBar.configure(relief="groove")

        self.TLabel1 = ttk.Label(self.toolBar)
        self.TLabel1.place(relx=0.003, rely=0.04, height=23, width=156)
        self.TLabel1.configure(background="#d9d9d9")
        self.TLabel1.configure(foreground="#000000")
        self.TLabel1.configure(font="TkDefaultFont")
        self.TLabel1.configure(relief="flat")
        self.TLabel1.configure(anchor='w')
        self.TLabel1.configure(justify='left')
        self.TLabel1.configure(text='''Special functions provided:''')

        self.imageDic = dict()
        self.imageDic['pi'] = tk.PhotoImage(file="Images/pi.png").subsample(4, 4)
        self.imageDic['exp'] = tk.PhotoImage(file="Images/exp.png").subsample(4, 4)
        self.imageDic['sin'] = tk.PhotoImage(file="Images/sin.png").subsample(4, 4)
        self.imageDic['cos'] = tk.PhotoImage(file="Images/cos.png").subsample(4, 4)
        self.imageDic['tan'] = tk.PhotoImage(file="Images/tan.png").subsample(4, 4)
        self.imageDic['root'] = tk.PhotoImage(file="Images/root.png").subsample(4, 4)
        self.imageDic['log'] = tk.PhotoImage(file="Images/log.png").subsample(4, 4)

        self.expBtn = tk.Button(self.toolBar)
        self.expBtn.configure(image=self.imageDic['exp'])
        self.expBtn.place(relx=0.432, rely=0.04, height=23, width=25)
        self.expBtn.configure(activebackground="#ececec")
        self.expBtn.configure(activeforeground="#000000")
        self.expBtn.configure(background="#d9d9d9")
        self.expBtn.configure(command=rootFinder_support.expFormat)
        self.expBtn.configure(disabledforeground="#a3a3a3")
        self.expBtn.configure(foreground="#000000")
        self.expBtn.configure(highlightbackground="#d9d9d9")
        self.expBtn.configure(highlightcolor="black")
        self.expBtn.configure(pady="0")
        self.expBtn.configure(relief="flat")
        tooltip_font = "TkDefaultFont"
        ToolTip(self.expBtn, tooltip_font, '''exp(x)''', delay=0.5)

        self.logBtn = tk.Button(self.toolBar)
        self.logBtn.configure(image=self.imageDic['log'])
        self.logBtn.place(relx=0.514, rely=0.04, height=23, width=25)
        self.logBtn.configure(activebackground="#ececec")
        self.logBtn.configure(activeforeground="#000000")
        self.logBtn.configure(background="#d9d9d9")
        self.logBtn.configure(command=rootFinder_support.logFormat)
        self.logBtn.configure(disabledforeground="#a3a3a3")
        self.logBtn.configure(foreground="#000000")
        self.logBtn.configure(highlightbackground="#d9d9d9")
        self.logBtn.configure(highlightcolor="black")
        self.logBtn.configure(pady="0")
        self.logBtn.configure(relief="flat")
        tooltip_font = "TkDefaultFont"
        ToolTip(self.logBtn, tooltip_font, '''log(b, a)''', delay=0.5)

        self.sinBtn = tk.Button(self.toolBar)
        self.sinBtn.configure(image=self.imageDic['sin'])
        self.sinBtn.place(relx=0.595, rely=0.04, height=23, width=25)
        self.sinBtn.configure(activebackground="#ececec")
        self.sinBtn.configure(activeforeground="#000000")
        self.sinBtn.configure(background="#d9d9d9")
        self.sinBtn.configure(command=rootFinder_support.sinFormat)
        self.sinBtn.configure(disabledforeground="#a3a3a3")
        self.sinBtn.configure(foreground="#000000")
        self.sinBtn.configure(highlightbackground="#d9d9d9")
        self.sinBtn.configure(highlightcolor="black")
        self.sinBtn.configure(pady="0")
        self.sinBtn.configure(relief="flat")
        tooltip_font = "TkDefaultFont"
        ToolTip(self.sinBtn, tooltip_font, '''sin(x)''', delay=0.5)

        self.cosBtn = tk.Button(self.toolBar)
        self.cosBtn.configure(image=self.imageDic['cos'])
        self.cosBtn.place(relx=0.676, rely=0.04, height=23, width=25)
        self.cosBtn.configure(activebackground="#ececec")
        self.cosBtn.configure(activeforeground="#000000")
        self.cosBtn.configure(background="#d9d9d9")
        self.cosBtn.configure(command=rootFinder_support.cosFormat)
        self.cosBtn.configure(disabledforeground="#a3a3a3")
        self.cosBtn.configure(foreground="#000000")
        self.cosBtn.configure(highlightbackground="#d9d9d9")
        self.cosBtn.configure(highlightcolor="black")
        self.cosBtn.configure(pady="0")
        self.cosBtn.configure(relief="flat")
        tooltip_font = "TkDefaultFont"
        ToolTip(self.cosBtn, tooltip_font, '''cos(x)''', delay=0.5)

        self.tanBtn = tk.Button(self.toolBar)
        self.tanBtn.configure(image=self.imageDic['tan'])
        self.tanBtn.place(relx=0.757, rely=0.04, height=23, width=25)
        self.tanBtn.configure(activebackground="#ececec")
        self.tanBtn.configure(activeforeground="#000000")
        self.tanBtn.configure(background="#d9d9d9")
        self.tanBtn.configure(command=rootFinder_support.tanFormat)
        self.tanBtn.configure(disabledforeground="#a3a3a3")
        self.tanBtn.configure(foreground="#000000")
        self.tanBtn.configure(highlightbackground="#d9d9d9")
        self.tanBtn.configure(highlightcolor="black")
        self.tanBtn.configure(pady="0")
        self.tanBtn.configure(relief="flat")
        tooltip_font = "TkDefaultFont"
        ToolTip(self.tanBtn, tooltip_font, '''tan(x)''', delay=0.5)

        self.rootBtn = tk.Button(self.toolBar)
        self.rootBtn.configure(image=self.imageDic['root'])
        self.rootBtn.place(relx=0.838, rely=0.04, height=23, width=25)
        self.rootBtn.configure(activebackground="#ececec")
        self.rootBtn.configure(activeforeground="#000000")
        self.rootBtn.configure(background="#d9d9d9")
        self.rootBtn.configure(command=rootFinder_support.rootFormat)
        self.rootBtn.configure(disabledforeground="#a3a3a3")
        self.rootBtn.configure(foreground="#000000")
        self.rootBtn.configure(highlightbackground="#d9d9d9")
        self.rootBtn.configure(highlightcolor="black")
        self.rootBtn.configure(pady="0")
        self.rootBtn.configure(relief="flat")
        tooltip_font = "TkDefaultFont"
        ToolTip(self.rootBtn, tooltip_font, '''root(p, x)''', delay=0.5)

        self.piBtn = tk.Button(self.toolBar)
        self.piBtn.configure(image=self.imageDic['pi'])
        self.piBtn.place(relx=0.919, rely=0.04, height=23, width=25)
        self.piBtn.configure(activebackground="#ececec")
        self.piBtn.configure(activeforeground="#000000")
        self.piBtn.configure(background="#d9d9d9")
        self.piBtn.configure(command=rootFinder_support.piFormat)
        self.piBtn.configure(disabledforeground="#a3a3a3")
        self.piBtn.configure(foreground="#000000")
        self.piBtn.configure(highlightbackground="#d9d9d9")
        self.piBtn.configure(highlightcolor="black")
        self.piBtn.configure(pady="0")
        self.piBtn.configure(relief="flat")
        tooltip_font = "TkDefaultFont"
        ToolTip(self.piBtn, tooltip_font, '''numpi''', delay=0.5)

        self.chooseLbl = tk.Label(self.backCanvas)
        self.chooseLbl.place(relx=0.027, rely=0.089, height=21, width=154)
        self.chooseLbl.configure(background="#d9d9d9")
        self.chooseLbl.configure(disabledforeground="#a3a3a3")
        self.chooseLbl.configure(foreground="#000000")
        self.chooseLbl.configure(text='''Choose method of solution:''')

        self.methodsCombobox = ttk.Combobox(self.backCanvas)
        self.methodsCombobox.place(relx=0.486, rely=0.089, relheight=0.047
                                   , relwidth=0.486)
        self.value_list = ['Bisection method', 'Regula-Falsi method', 'Newton Raphson method', 'Secant method']
        self.methodsCombobox.configure(values=self.value_list)
        self.methodsCombobox.configure(textvariable=rootFinder_support.combobox)
        self.methodsCombobox.configure(takefocus="")
        self.methodsCombobox.current(0)

        self.funcLabel = ttk.Label(self.backCanvas)
        self.funcLabel.place(relx=0.027, rely=0.156, height=19, width=156)
        self.funcLabel.configure(background="#d9d9d9")
        self.funcLabel.configure(foreground="#000000")
        self.funcLabel.configure(font="TkDefaultFont")
        self.funcLabel.configure(relief="flat")
        self.funcLabel.configure(anchor='e')
        self.funcLabel.configure(justify='right')
        self.funcLabel.configure(text='''Enter a function of x:''')

        self.funcEntry = ttk.Entry(self.backCanvas)
        self.funcEntry.place(relx=0.486, rely=0.156, relheight=0.047
                             , relwidth=0.486)
        self.funcEntry.configure(takefocus="")
        self.funcEntry.configure(cursor="ibeam")

        self.iterLabel = ttk.Label(self.backCanvas)
        self.iterLabel.place(relx=0.027, rely=0.246, height=19, width=236)
        self.iterLabel.configure(background="#d9d9d9")
        self.iterLabel.configure(foreground="#000000")
        self.iterLabel.configure(font="TkDefaultFont")
        self.iterLabel.configure(relief="flat")
        self.iterLabel.configure(anchor='e')
        self.iterLabel.configure(justify='right')
        self.iterLabel.configure(text='''Enter number of iteration (50 by default):''')

        self.iterEntry = ttk.Entry(self.backCanvas)
        self.iterEntry.place(relx=0.676, rely=0.246, relheight=0.047
                             , relwidth=0.295)
        self.iterEntry.configure(takefocus="")
        self.iterEntry.configure(cursor="ibeam")

        self.precEntry = ttk.Entry(self.backCanvas)
        self.precEntry.place(relx=0.676, rely=0.313, relheight=0.047
                             , relwidth=0.295)
        self.precEntry.configure(takefocus="")
        self.precEntry.configure(cursor="ibeam")

        self.TLabel2 = ttk.Label(self.backCanvas)
        self.TLabel2.place(relx=0.027, rely=0.313, height=19, width=236)
        self.TLabel2.configure(background="#d9d9d9")
        self.TLabel2.configure(foreground="#000000")
        self.TLabel2.configure(font="TkDefaultFont")
        self.TLabel2.configure(relief="flat")
        self.TLabel2.configure(anchor='e')
        self.TLabel2.configure(justify='right')
        self.TLabel2.configure(text='''Enter desired presision (0.00001 by default):''')

        self.style.map('TCheckbutton', background=
        [('selected', _bgcolor), ('active', _ana2color)])
        self.TCheckbutton = ttk.Checkbutton(self.backCanvas)
        self.TCheckbutton.place(relx=0.162, rely=0.379, relwidth=0.727
                                , relheight=0.0, height=21)
        self.TCheckbutton.configure(variable=rootFinder_support.tch112)
        self.TCheckbutton.configure(takefocus="")
        self.TCheckbutton.configure(text='''Check if you want to output the solution in file''')

        self.TFrame1 = ttk.Frame(self.backCanvas)
        self.TFrame1.place(relx=0.0, rely=0.446, relheight=0.19, relwidth=0.986)
        self.TFrame1.configure(relief='groove')
        self.TFrame1.configure(borderwidth="2")
        self.TFrame1.configure(relief="groove")

        self.BoundLabel = ttk.Label(self.TFrame1)
        self.BoundLabel.place(relx=0.082, rely=0.118, height=19, width=296)
        self.BoundLabel.configure(background="#d9d9d9")
        self.BoundLabel.configure(foreground="#000000")
        self.BoundLabel.configure(font="TkDefaultFont")
        self.BoundLabel.configure(relief="flat")
        self.BoundLabel.configure(anchor='center')
        self.BoundLabel.configure(justify='center')
        self.BoundLabel.configure(text='''Enter Bounds''')

        self.fromLabel = ttk.Label(self.TFrame1)
        self.fromLabel.place(relx=0.274, rely=0.353, height=19, width=38)
        self.fromLabel.configure(background="#d9d9d9")
        self.fromLabel.configure(foreground="#000000")
        self.fromLabel.configure(font="TkDefaultFont")
        self.fromLabel.configure(relief="flat")
        self.fromLabel.configure(anchor='e')
        self.fromLabel.configure(justify='right')
        self.fromLabel.configure(text='''From:''')

        self.fromEntry = ttk.Entry(self.TFrame1)
        self.fromEntry.place(relx=0.411, rely=0.353, relheight=0.247
                             , relwidth=0.345)
        self.fromEntry.configure(takefocus="")
        self.fromEntry.configure(cursor="ibeam")

        self.toLabel = ttk.Label(self.TFrame1)
        self.toLabel.place(relx=0.274, rely=0.588, height=19, width=38)
        self.toLabel.configure(background="#d9d9d9")
        self.toLabel.configure(foreground="#000000")
        self.toLabel.configure(font="TkDefaultFont")
        self.toLabel.configure(relief="flat")
        self.toLabel.configure(anchor='e')
        self.toLabel.configure(justify='center')
        self.toLabel.configure(text='''To:''')

        self.toEntry = ttk.Entry(self.TFrame1)
        self.toEntry.place(relx=0.411, rely=0.588, relheight=0.247
                           , relwidth=0.345)
        self.toEntry.configure(takefocus="")
        self.toEntry.configure(cursor="ibeam")

        self.solveButton = ttk.Button(self.backCanvas)
        self.solveButton.place(relx=0.324, rely=0.647, height=25, width=116)
        self.solveButton.configure(takefocus="")
        self.solveButton.configure(text='''Find Root''')


# ======================================================
# Modified by Rozen to remove Tkinter import statements and to receive
# the font as an argument.
# ======================================================
# Found the original code at:
# http://code.activestate.com/recipes/576688-tooltip-for-tkinter/
# ======================================================

from time import time, localtime, strftime


class ToolTip(tk.Toplevel):
    """
    Provides a ToolTip widget for Tkinter.
    To apply a ToolTip to any Tkinter widget, simply pass the widget to the
    ToolTip constructor
    """

    def __init__(self, wdgt, tooltip_font, msg=None, msgFunc=None,
                 delay=1, follow=True):
        """
        Initialize the ToolTip

        Arguments:
          wdgt: The widget this ToolTip is assigned to
          tooltip_font: Font to be used
          msg:  A static string message assigned to the ToolTip
          msgFunc: A function that retrieves a string to use as the ToolTip text
          delay:   The delay in seconds before the ToolTip appears(may be float)
          follow:  If True, the ToolTip follows motion, otherwise hides
        """
        self.wdgt = wdgt
        # The parent of the ToolTip is the parent of the ToolTips widget
        self.parent = self.wdgt.master
        # Initalise the Toplevel
        tk.Toplevel.__init__(self, self.parent, bg='black', padx=1, pady=1)
        # Hide initially
        self.withdraw()
        # The ToolTip Toplevel should have no frame or title bar
        self.overrideredirect(True)

        # The msgVar will contain the text displayed by the ToolTip
        self.msgVar = tk.StringVar()
        if msg is None:
            self.msgVar.set('No message provided')
        else:
            self.msgVar.set(msg)
        self.msgFunc = msgFunc
        self.delay = delay
        self.follow = follow
        self.visible = 0
        self.lastMotion = 0
        # The text of the ToolTip is displayed in a Message widget
        tk.Message(self, textvariable=self.msgVar, bg='#FFFFDD',
                   font=tooltip_font,
                   aspect=1000).grid()

        # Add bindings to the widget.  This will NOT override
        # bindings that the widget already has
        self.wdgt.bind('<Enter>', self.spawn, '+')
        self.wdgt.bind('<Leave>', self.hide, '+')
        self.wdgt.bind('<Motion>', self.move, '+')

    def spawn(self, event=None):
        """
        Spawn the ToolTip.  This simply makes the ToolTip eligible for display.
        Usually this is caused by entering the widget

        Arguments:
          event: The event that called this funciton
        """
        self.visible = 1
        # The after function takes a time argument in miliseconds
        self.after(int(self.delay * 1000), self.show)

    def show(self):
        """
        Displays the ToolTip if the time delay has been long enough
        """
        if self.visible == 1 and time() - self.lastMotion > self.delay:
            self.visible = 2
        if self.visible == 2:
            self.deiconify()

    def move(self, event):
        """
        Processes motion within the widget.
        Arguments:
          event: The event that called this function
        """
        self.lastMotion = time()
        # If the follow flag is not set, motion within the
        # widget will make the ToolTip disappear
        #
        if self.follow is False:
            self.withdraw()
            self.visible = 1

        # Offset the ToolTip 10x10 pixes southwest of the pointer
        self.geometry('+%i+%i' % (event.x_root + 20, event.y_root - 10))
        try:
            # Try to call the message function.  Will not change
            # the message if the message function is None or
            # the message function fails
            self.msgVar.set(self.msgFunc())
        except:
            pass
        self.after(int(self.delay * 1000), self.show)

    def hide(self, event=None):
        """
        Hides the ToolTip.  Usually this is caused by leaving the widget
        Arguments:
          event: The event that called this function
        """
        self.visible = 0
        self.withdraw()


# ===========================================================
#                   End of Class ToolTip
# ===========================================================

# The following code is added to facilitate the Scrolled widgets you specified.
class AutoScroll(object):
    '''Configure the scrollbars for a widget.'''

    def __init__(self, master):
        #  Rozen. Added the try-except clauses so that this class
        #  could be used for scrolled entry widget for which vertical
        #  scrolling is not supported. 5/7/14.
        try:
            vsb = ttk.Scrollbar(master, orient='vertical', command=self.yview)
        except:
            pass
        hsb = ttk.Scrollbar(master, orient='horizontal', command=self.xview)
        try:
            self.configure(yscrollcommand=self._autoscroll(vsb))
        except:
            pass
        self.configure(xscrollcommand=self._autoscroll(hsb))
        self.grid(column=0, row=0, sticky='nsew')
        try:
            vsb.grid(column=1, row=0, sticky='ns')
        except:
            pass
        hsb.grid(column=0, row=1, sticky='ew')
        master.grid_columnconfigure(0, weight=1)
        master.grid_rowconfigure(0, weight=1)
        # Copy geometry methods of master  (taken from ScrolledText.py)
        if py3:
            methods = tk.Pack.__dict__.keys() | tk.Grid.__dict__.keys() \
                      | tk.Place.__dict__.keys()
        else:
            methods = tk.Pack.__dict__.keys() + tk.Grid.__dict__.keys() \
                      + tk.Place.__dict__.keys()
        for meth in methods:
            if meth[0] != '_' and meth not in ('config', 'configure'):
                setattr(self, meth, getattr(master, meth))

    @staticmethod
    def _autoscroll(sbar):
        '''Hide and show scrollbar as needed.'''

        def wrapped(first, last):
            first, last = float(first), float(last)
            if first <= 0 and last >= 1:
                sbar.grid_remove()
            else:
                sbar.grid()
            sbar.set(first, last)

        return wrapped

    def __str__(self):
        return str(self.master)


def _create_container(func):
    '''Creates a ttk Frame with a given master, and use this new frame to
    place the scrollbars and the widget.'''

    def wrapped(cls, master, **kw):
        container = ttk.Frame(master)
        container.bind('<Enter>', lambda e: _bound_to_mousewheel(e, container))
        container.bind('<Leave>', lambda e: _unbound_to_mousewheel(e, container))
        return func(cls, container, **kw)

    return wrapped


class ScrolledWindow(AutoScroll, tk.Canvas):
    '''A standard Tkinter Canvas widget with scrollbars that will
    automatically show/hide as needed.'''

    @_create_container
    def __init__(self, master, **kw):
        tk.Canvas.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)


import platform


def _bound_to_mousewheel(event, widget):
    child = widget.winfo_children()[0]
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        child.bind_all('<MouseWheel>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-MouseWheel>', lambda e: _on_shiftmouse(e, child))
    else:
        child.bind_all('<Button-4>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Button-5>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-Button-4>', lambda e: _on_shiftmouse(e, child))
        child.bind_all('<Shift-Button-5>', lambda e: _on_shiftmouse(e, child))


def _unbound_to_mousewheel(event, widget):
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        widget.unbind_all('<MouseWheel>')
        widget.unbind_all('<Shift-MouseWheel>')
    else:
        widget.unbind_all('<Button-4>')
        widget.unbind_all('<Button-5>')
        widget.unbind_all('<Shift-Button-4>')
        widget.unbind_all('<Shift-Button-5>')


def _on_mousewheel(event, widget):
    if platform.system() == 'Windows':
        widget.yview_scroll(-1 * int(event.delta / 120), 'units')
    elif platform.system() == 'Darwin':
        widget.yview_scroll(-1 * int(event.delta), 'units')
    else:
        if event.num == 4:
            widget.yview_scroll(-1, 'units')
        elif event.num == 5:
            widget.yview_scroll(1, 'units')


def _on_shiftmouse(event, widget):
    if platform.system() == 'Windows':
        widget.xview_scroll(-1 * int(event.delta / 120), 'units')
    elif platform.system() == 'Darwin':
        widget.xview_scroll(-1 * int(event.delta), 'units')
    else:
        if event.num == 4:
            widget.xview_scroll(-1, 'units')
        elif event.num == 5:
            widget.xview_scroll(1, 'units')


if __name__ == '__main__':
    vp_start_gui()
