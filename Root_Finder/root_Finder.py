#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 5.0.3
#  in conjunction with Tcl version 8.6
#    Apr 15, 2020 05:32:42 PM +0200  platform: Windows NT

import sys
from graphPlotter import graphPlotter

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk

    py3 = False
except ImportError:
    import tkinter.ttk as ttk

    py3 = True

import root_Finder_support


def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = tk.Tk()
    root_Finder_support.set_Tk_var()
    top = RootFinder(root)
    root_Finder_support.init(root, top)
    root.mainloop()


w = None


def create_RootFinder(rt, *args, **kwargs):
    '''Starting point when module is imported by another module.
       Correct form of call: 'create_RootFinder(root, *args, **kwargs)' .'''
    global w, w_win, root
    # rt = root
    root = rt
    w = tk.Toplevel(root)
    root_Finder_support.set_Tk_var()
    top = RootFinder(w)
    root_Finder_support.init(w, top, *args, **kwargs)
    return (w, top)


def destroy_RootFinder():
    global w
    w.destroy()
    w = None


class RootFinder:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9'  # X11 color: 'gray85'
        _ana1color = '#d9d9d9'  # X11 color: 'gray85'
        _ana2color = '#ececec'  # Closest X11 color: 'gray92'
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.', background=_bgcolor)
        self.style.configure('.', foreground=_fgcolor)
        self.style.configure('.', font="TkDefaultFont")
        self.style.map('.', background=
        [('selected', _compcolor), ('active', _ana2color)])

        top.geometry("661x645+340+0")
        top.minsize(645, 690)
        top.maxsize(1370, 750)
        top.resizable(1, 1)
        top.title("Root Finder")
        top.configure(background="#4b4b4b")

        self.style.configure('TNotebook.Tab', background=_bgcolor)
        self.style.configure('TNotebook.Tab', foreground=_fgcolor)
        self.style.map('TNotebook.Tab', background=
        [('selected', _compcolor), ('active', _ana2color)])
        self.ouputArea = ttk.Notebook(top)
        self.ouputArea.place(relx=0.0, rely=0.667, relheight=0.3333, relwidth=1)
        self.ouputArea.configure(takefocus="")
        self.textConsole = tk.Frame(self.ouputArea)
        self.ouputArea.add(self.textConsole, padding=1)
        self.ouputArea.tab(0, text="Console", compound="left", underline="-1")
        self.textConsole.configure(background="#3e3e3e")
        self.textConsole.configure(highlightbackground="#d9d9d9")
        self.textConsole.configure(highlightcolor="#2327ba")
        self.graphConsole = tk.Frame(self.ouputArea)
        self.ouputArea.add(self.graphConsole, padding=1)
        self.ouputArea.tab(1, text="Graph", compound="left", underline="-1", )
        self.graphConsole.configure(background="#3e3e3e")
        self.graphConsole.configure(highlightbackground="#2327ba")
        self.graphConsole.configure(highlightcolor="#ffffff")

        self.textCanvas = tk.Text(self.textConsole)
        self.scrolText = ttk.Scrollbar(self.textConsole, command=self.textCanvas.yview)
        self.scrolText.pack(side=tk.RIGHT, fill=tk.Y)
        self.textCanvas.place(relx=0.0, rely=0.0, relheight=1, relwidth=1)
        self.textCanvas.configure(background="#3e3e3e")
        self.textCanvas.configure(foreground="#ffffff")

        self.chooseLbl = ttk.Label(top)
        self.chooseLbl.place(relx=0.02, rely=0.031, height=19, width=258)
        self.chooseLbl.configure(background="#4b4b4b")
        self.chooseLbl.configure(foreground="#ffffff")
        self.chooseLbl.configure(font="TkDefaultFont")
        self.chooseLbl.configure(relief="flat")
        self.chooseLbl.configure(anchor='e')
        self.chooseLbl.configure(justify='right')
        self.chooseLbl.configure(text='''Choose a method of solution :''')

        self.methodsCB = ttk.Combobox(top)
        self.methodsCB.place(relx=0.428, rely=0.031, relheight=0.033, relwidth=0.357)
        self.value_list = ['Bisection method', 'Regula-Falsi method', 'Fixed point iteration method',
                           'Newton Raphson method', 'Secant method']
        self.methodsCB.configure(values=self.value_list)
        self.methodsCB.configure(textvariable=root_Finder_support.combobox)
        self.methodsCB.configure(foreground="#000000")
        self.methodsCB.configure(background="#ffffff")
        self.methodsCB.configure(takefocus="")
        self.methodsCB.current(0)

        self.enterLbl = ttk.Label(top)
        self.enterLbl.place(relx=0.02, rely=0.109, height=19, width=258)
        self.enterLbl.configure(background="#4b4b4b")
        self.enterLbl.configure(foreground="#ffffff")
        self.enterLbl.configure(font="TkDefaultFont")
        self.enterLbl.configure(relief="flat")
        self.enterLbl.configure(anchor='e')
        self.enterLbl.configure(justify='right')
        self.enterLbl.configure(text='Enter a function of x [f(x)] :')

        self.funcEntry = ttk.Entry(top)
        self.funcEntry.place(relx=0.428, rely=0.109, relheight=0.037, relwidth=0.357)
        self.funcEntry.configure(takefocus="")
        self.funcEntry.configure(cursor="ibeam")
        self.funcEntry.configure(textvariable=root_Finder_support.expression)

        self.iterLbl = ttk.Label(top)
        self.iterLbl.place(relx=0.02, rely=0.202, height=19, width=258)
        self.iterLbl.configure(background="#4b4b4b")
        self.iterLbl.configure(foreground="#ffffff")
        self.iterLbl.configure(font="TkDefaultFont")
        self.iterLbl.configure(relief="flat")
        self.iterLbl.configure(anchor='e')
        self.iterLbl.configure(justify='right')
        self.iterLbl.configure(text='''Enter maximum number of iterations :''')

        self.iterEntry = ttk.Entry(top)
        self.iterEntry.place(relx=0.428, rely=0.202, relheight=0.037, relwidth=0.191)
        self.iterEntry.configure(takefocus="")
        self.iterEntry.configure(cursor="ibeam")
        self.iterEntry.configure(textvariable=root_Finder_support.iter)
        self.iterEntry.insert(0, '50')

        self.preLbl = ttk.Label(top)
        self.preLbl.place(relx=0.02, rely=0.264, height=19, width=258)
        self.preLbl.configure(background="#4b4b4b")
        self.preLbl.configure(foreground="#ffffff")
        self.preLbl.configure(font="TkDefaultFont")
        self.preLbl.configure(relief="flat")
        self.preLbl.configure(anchor='e')
        self.preLbl.configure(justify='right')
        self.preLbl.configure(text='''Enter desired precision :''')

        self.preEntry = ttk.Entry(top)
        self.preEntry.place(relx=0.428, rely=0.264, relheight=0.037, relwidth=0.191)
        self.preEntry.configure(takefocus="")
        self.preEntry.configure(cursor="ibeam")
        self.preEntry.configure(textvariable=root_Finder_support.precision)
        self.preEntry.insert(0, '0.00001')

        self.indirectFr = tk.LabelFrame(top)
        self.indirectFr.place(relx=0.02, rely=0.326, relheight=0.209, relwidth=0.446)
        self.indirectFr.configure(relief='groove')
        self.indirectFr.configure(foreground="#ffffff")
        self.indirectFr.configure(text=' Indirect Methods Bounds ')
        self.indirectFr.configure(background="#4b4b4b")
        self.indirectFr.configure(highlightcolor="#646464646464")

        self.lowLbl = ttk.Label(self.indirectFr)
        self.lowLbl.place(relx=0.041, rely=0.274, height=18, width=100, bordermode='ignore')
        self.lowLbl.configure(background="#4b4b4b")
        self.lowLbl.configure(foreground="#ffffff")
        self.lowLbl.configure(font="TkDefaultFont")
        self.lowLbl.configure(relief="flat")
        self.lowLbl.configure(anchor='w')
        self.lowLbl.configure(justify='left')
        self.lowLbl.configure(text='''Lower Bound :''')

        self.lowEntry = ttk.Entry(self.indirectFr)
        self.lowEntry.place(relx=0.397, rely=0.274, relheight=0.178, relwidth=0.427, bordermode='ignore')
        self.lowEntry.configure(takefocus="")
        self.lowEntry.configure(cursor="ibeam")
        self.lowEntry.configure(textvariable=root_Finder_support.lower)

        self.upLabel = ttk.Label(self.indirectFr)
        self.upLabel.place(relx=0.041, rely=0.556, height=18, width=100, bordermode='ignore')
        self.upLabel.configure(background="#4b4b4b")
        self.upLabel.configure(foreground="#ffffff")
        self.upLabel.configure(font="TkDefaultFont")
        self.upLabel.configure(relief="flat")
        self.upLabel.configure(anchor='w')
        self.upLabel.configure(justify='left')
        self.upLabel.configure(text='''Upper Bound :''')

        self.upEntry = ttk.Entry(self.indirectFr)
        self.upEntry.place(relx=0.397, rely=0.556, relheight=0.178, relwidth=0.427, bordermode='ignore')
        self.upEntry.configure(takefocus="")
        self.upEntry.configure(cursor="ibeam")
        self.upEntry.configure(textvariable=root_Finder_support.upper)

        self.directFr = tk.LabelFrame(top)
        self.directFr.place(relx=0.534, rely=0.326, relheight=0.209, relwidth=0.446)
        self.directFr.configure(relief='groove')
        self.directFr.configure(foreground="#ffffff")
        self.directFr.configure(text=' Indirect Methods Guess ')
        self.directFr.configure(background="#4b4b4b")

        self.guessLbl1 = ttk.Label(self.directFr)
        self.guessLbl1.place(relx=0.041, rely=0.274, height=18, width=100, bordermode='ignore')
        self.guessLbl1.configure(background="#4b4b4b")
        self.guessLbl1.configure(foreground="#ffffff")
        self.guessLbl1.configure(font="TkDefaultFont")
        self.guessLbl1.configure(relief="flat")
        self.guessLbl1.configure(anchor='w')
        self.guessLbl1.configure(justify='left')
        self.guessLbl1.configure(text='''Initial guess 1 :''')

        self.guessEntry1 = ttk.Entry(self.directFr)
        self.guessEntry1.place(relx=0.397, rely=0.274, relheight=0.178, relwidth=0.427, bordermode='ignore')
        self.guessEntry1.configure(takefocus="")
        self.guessEntry1.configure(cursor="ibeam")
        self.guessEntry1.configure(textvariable=root_Finder_support.guess1)

        self.methodsCB.bind("<<ComboboxSelected>>", lambda frame=self.directFr, label=self.enterLbl:
                                                    self.itemChanged(frame, label))

        self.checkBtn = tk.Checkbutton(top)
        self.checkBtn.place(relx=0.257, rely=0.558, relheight=0.039, relwidth=0.401)
        self.checkBtn.configure(activebackground="#4b4b4b")
        self.checkBtn.configure(activeforeground="red")
        self.checkBtn.configure(background="#4b4b4b")
        self.checkBtn.configure(disabledforeground="#4b4b4b")
        self.checkBtn.configure(foreground="red")
        self.checkBtn.configure(highlightbackground="#d9d9d9")
        self.checkBtn.configure(highlightcolor="black")
        self.checkBtn.configure(justify='left')
        self.checkBtn.configure(text='''Check if you want to output result in file''')
        self.checkBtn.configure(variable=root_Finder_support.check68)
        self.checkBtn.configure(command=root_Finder_support.solve)

        self.findRootBtn = ttk.Button(top)
        self.findRootBtn.place(relx=0.337, rely=0.605, height=25, width=136)
        self.findRootBtn.configure(command=lambda txt=self.textCanvas, gph=self.graphConsole:
                                                        root_Finder_support.solve(txt,gph))
        self.findRootBtn.configure(takefocus="")
        self.findRootBtn.configure(text='''Find Root''')

    def itemChanged(self, frame, label):
        item = self.methodsCB.get()
        if item == 'Secant method':
            self.guessLbl2 = ttk.Label(self.directFr)
            self.guessLbl2.place(relx=0.041, rely=0.556, height=18, width=100, bordermode='ignore')
            self.guessLbl2.configure(background="#4b4b4b")
            self.guessLbl2.configure(foreground="#ffffff")
            self.guessLbl2.configure(font="TkDefaultFont")
            self.guessLbl2.configure(relief="flat")
            self.guessLbl2.configure(anchor='w')
            self.guessLbl2.configure(justify='left')
            self.guessLbl2.configure(text='Initial guess 2 :')

            self.guessEntry2 = ttk.Entry(self.directFr)
            self.guessEntry2.place(relx=0.397, rely=0.556, relheight=0.178, relwidth=0.427, bordermode='ignore')
            self.guessEntry2.configure(takefocus="")
            self.guessEntry2.configure(cursor="ibeam")
            self.guessEntry2.configure(textvariable=root_Finder_support.guess2)

            self.enterLbl.configure(text='Enter a function of x [f(x)] :')
        elif item == 'Fixed point iteration method':
            self.enterLbl.configure(text='Enter a function of x [g(x)] :')
            try:
                self.guessLbl2.destroy()
                self.guessEntry2.destroy()
            except:
                pass
        else:
            self.enterLbl.configure(text='Enter a function of x [f(x)] :')
            try:
                self.guessLbl2.destroy()
                self.guessEntry2.destroy()
            except:
                pass


if __name__ == '__main__':
    vp_start_gui()
